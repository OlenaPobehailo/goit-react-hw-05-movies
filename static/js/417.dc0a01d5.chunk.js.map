{"version":3,"file":"static/js/417.dc0a01d5.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","hooks/useHttpRequest.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  margin: 20px 0;\n\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  li {\n    display: flex;\n    border: 1px solid lightgray;\n  }\n\n  img {\n    max-width: 350px;\n    height: auto;\n  }\n\n  div {\n  }\n`;\nexport const Wrapper = styled.div`\n  padding: 20px;\n`;\n\nexport const Actor = styled.p`\n  font-size: 24px;\n  font-weight:500;\n  line-height: 2;\n`;\n\nexport const Character = styled.p`\n  font-size: 24px;\n  line-height: 2;\n`;\n\n","import { useParams } from 'react-router-dom';\nimport Loader from 'components/Loader';\nimport { useHttpRequest } from 'hooks/useHttpRequest';\nimport { basePosterUrl, fetchCast } from 'services/api';\nimport { Actor, Character, StyledList, Wrapper } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, { isLoading, error }] = useHttpRequest(fetchCast, movieId);\n\n  if (!cast || isLoading) {\n    return <Loader/>;\n  }\n  \n  if (error) {\n    return <p>Error: {error}</p>;\n  }\n\n\n  if (!isLoading && (!cast || cast.length === 0)) {\n    return <h2>No cast information available.</h2>;\n  }\n\n  return (\n    <StyledList>\n      {cast &&\n        cast.map(item => (\n          <li key={item.id}>\n            <img\n              src={`${basePosterUrl}${item.profile_path}` }\n              alt={item.name}\n              onError={e => {\n                e.target.src = 'https://placehold.co/350x500?text=Not+available';\n              }}\n            />\n            <Wrapper>\n              <Actor>{item.name}</Actor>\n\n              <Character>Character: {item.character}</Character>\n            </Wrapper>\n          </li>\n        ))}\n    </StyledList>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  background-color: #f5f5f5;\n`;\n","import { PropagateLoader } from 'react-spinners';\nimport { LoaderWrapper } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <LoaderWrapper>\n      <PropagateLoader color=\"#ff0000\" />\n    </LoaderWrapper>\n  );\n};\n\nexport default Loader;","import { useEffect, useState } from 'react';\n\nexport const useHttpRequest = (fn, param) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    fn(param)\n      .then(data => {\n        setData(data);\n        setLoading(false);\n      })\n      .catch(error => {\n        setError(error.message);\n        setLoading(false);\n      });\n  }, [fn, param]);\n\n  return [data, setData, { error, isLoading }];\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nexport const basePosterUrl = 'https://image.tmdb.org/t/p/w500';\n\nconst API_KEY = '9ce8efc3ff8d8ed00ad4e59e8fd58805';\naxios.defaults.params = { api_key: API_KEY };\n\nexport const fetchTrendingMovies = async params => {\n  const { data } = await axios.get(`/trending/movie/day`, {\n    params: { ...params },\n  });\n  // console.log(data.results);\n  return data.results;\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await axios.get(`/movie/${id}`);\n  // console.log(data);\n  return data;\n};\n\nexport const fetchCast = async id => {\n  const { data } = await axios.get(`/movie/${id}/credits`);\n  // console.log(data.cast);\n  return data.cast;\n};\n\nexport const fetchReviews = async id => {\n  const { data } = await axios.get(`/movie/${id}/reviews`);\n  // console.log(data.results);\n  return data.results;\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const { data } = await axios.get(`/search/movie?query=${query}`);\n  // console.log(data.results);\n  return data.results;\n};\n"],"names":["StyledList","styled","_templateObject","_taggedTemplateLiteral","Wrapper","_templateObject2","Actor","_templateObject3","Character","_templateObject4","movieId","useParams","_useHttpRequest","useHttpRequest","fetchCast","_useHttpRequest2","_slicedToArray","cast","_useHttpRequest2$","isLoading","error","_jsx","Loader","_jsxs","children","length","map","item","src","concat","basePosterUrl","profile_path","alt","name","onError","e","target","character","id","LoaderWrapper","PropagateLoader","color","fn","param","_useState","useState","_useState2","data","setData","_useState3","_useState4","setError","_useState5","_useState6","setLoading","useEffect","then","catch","message","axios","api_key","fetchTrendingMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","params","_yield$axios$get","_context","prev","next","_objectSpread","sent","abrupt","results","stop","_x","apply","arguments","fetchMovieById","_ref2","_callee2","_yield$axios$get2","_context2","_x2","_ref3","_callee3","_yield$axios$get3","_context3","_x3","fetchReviews","_ref4","_callee4","_yield$axios$get4","_context4","_x4","fetchMoviesByQuery","_ref5","_callee5","query","_yield$axios$get5","_context5","_x5"],"sourceRoot":""}